require_relative 'PodfileUtils/lock_patcher'
require_relative 'PodfileUtils/repo'

project 'Tests.xcodeproj'
workspace 'Tests.xcworkspace'

use_frameworks!
inhibit_all_warnings!

mixbox = Devpods::Repo.new(
    'ssh://git@github.com:avito-tech/Mixbox.git',
    lambda { |name, hash|
      local_hash = hash.clone
      local_hash[:inhibit_warnings] = false
      local_hash[:configurations] = ['Debug']
      pod name, local_hash
    }
)
mixbox.local_path_value = '..'

sourcery = Devpods::Repo.new(
    'https://github.com/avito-tech/Sourcery.git',
    lambda { |name, hash|
      local_hash = hash.clone
      local_hash[:inhibit_warnings] = false
      local_hash[:configurations] = ['Debug']
      pod name, local_hash
    }
)
sourcery.branch_value = 'master'
sourcery.local_path_env = 'MIXBOX_SOURCERY_LOCAL_PATH'

def tests_ipc_pods
  pod 'TestsIpc', :path => 'Frameworks/TestsIpc'
end

# TODO: Support mock generation for every test target
def tests_testing_helpers
  pod 'Cuckoo', :git => 'https://github.com/avito-tech/Cuckoo', :branch => 'avito20200410', :inhibit_warnings => true
end

def logic_tests_pods(mixbox)
  mixbox.pod_all_ios

  pod 'SBTUITestTunnel/Client', '3.0.6', :inhibit_warnings => true
  pod 'SBTUITestTunnel/Server', '3.0.6', :inhibit_warnings => true
  
  tests_testing_helpers
end
 
### TARGETS

target 'TestedApp' do
  platform :ios, '9.0'
  
  mixbox.pod 'MixboxInAppServices'
  mixbox.pod 'MixboxIpcSbtuiHost'
  pod 'SBTUITestTunnel/Server', '3.0.6', :inhibit_warnings => true

  tests_ipc_pods
end

target 'FakeSettingsApp' do
  platform :ios, '9.0'
  
  mixbox.pod 'MixboxFakeSettingsAppMain'
end

target 'GrayBoxUiTests' do
  platform :ios, '9.0'
  
  mixbox.pod 'MixboxGray'
  mixbox.pod 'MixboxStubbing'
  
  tests_testing_helpers
  tests_ipc_pods
end

target 'BlackBoxUiTests' do
  platform :ios, '9.0'
  
  mixbox.pod 'MixboxBlack'
  mixbox.pod 'MixboxIpcSbtuiClient'
  pod 'SBTUITestTunnel/Client', '3.0.6', :inhibit_warnings => true

  tests_testing_helpers
  tests_ipc_pods
end
  
target 'UnitTests' do
  platform :ios, '9.0'
  
  logic_tests_pods(mixbox)
  tests_ipc_pods # A kludge to access Singletons unrelated to IPC from TestsIpc (nice!).
end

target 'OsxUnitTests' do
  platform :osx, '10.14'

  # pod 'SourceryRuntime', :path => '/Users/razinov/src/Sourcery'
  # pod 'SourceryUtils', :path => '/Users/razinov/src/Sourcery'
  # pod 'SourceryFramework', :path => '/Users/razinov/src/Sourcery'
  sourcery.pod_all_osx
  mixbox.pod_all_osx
end

target 'HostedAppLogicTests' do
  platform :ios, '9.0'
  
  logic_tests_pods(mixbox)
  
  tests_ipc_pods # A kludge to access Singletons unrelated to IPC from TestsIpc (nice!).
end

target 'Lint' do
  platform :ios, '9.0'
  
  pod 'SwiftLint', '0.36.0', :inhibit_warnings => true # TODO: Update.
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      if config.name == 'Debug'
        config.build_settings['ENABLE_BITCODE'] = 'NO' # To support testing on devices
        config.build_settings['ENABLE_TESTABILITY'] = 'YES' # To support @testable import
        config.build_settings['OTHER_SWIFT_FLAGS'] ||= ['$(inherited)', '-D', 'MIXBOX_ENABLE_IN_APP_SERVICES', '-Onone']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', 'MIXBOX_ENABLE_IN_APP_SERVICES=1', 'ENABLE_UITUNNEL=1']
      end
    end
    
    remove_uikit_import_from_target(target)
  end
end

def remove_uikit_import_from_target(target)
  if ['MixboxBlack', 'MixboxTestsFoundation'].include?(target.name)
    # It doesn't work for these targets. Errors are like `Unknown type name 'XCEventGenerator'`
    return
  end
  
  dir = "#{__dir__}/Pods/Target Support Files/#{target.name}"
  
  remove_uikit_import_from_file("#{dir}/#{target.name}-umbrella.h")
  remove_uikit_import_from_file("#{dir}/#{target.name}-prefix.pch")
end

def remove_uikit_import_from_file(file_path)
  if File.file?(file_path)
    text = File.read(file_path)
    
    new_defines = '#ifndef MIXBOX_EXPORT
#if defined(__cplusplus)
#define MIXBOX_EXPORT extern "C"
#else
#define MIXBOX_EXPORT extern
#endif
#endif'

    # iOS
    text = text.gsub(old_defines('UIKit'), new_defines)
    # OSX
    text = text.gsub(old_defines('Cocoa'), new_defines)
    text = text.gsub('FOUNDATION_EXPORT', 'MIXBOX_EXPORT')

    File.open(file_path, "w") { |file| file.puts text }
  end
end

def old_defines(framework)
  "#ifdef __OBJC__
#import <#{framework}/#{framework}.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern \"C\"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif"
end